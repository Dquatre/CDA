<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Controller</Title>
			<Shortcut>controller</Shortcut>
			<Description>Service template for ASP.NET Core</Description>
			<Author>DIV</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
                <Literal Editable="true">
				    <ID>rootfilename</ID>
				    <ToolTip>root file name</ToolTip>
				    <Default>RootFilePlaceholder</Default>
			    </Literal>
			    <Literal Editable="true">
				    <ID>classname</ID>
				    <ToolTip>Class name</ToolTip>
				    <Default>ClassNamePlaceholder</Default>
			    </Literal>
				<Literal Editable="true">
					<ID>dtoph</ID>
					<Default>DTOPlaceholder</Default>
					<ToolTip>DTO name</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="csharp">
				<![CDATA[
using AutoMapper;
using $rootfilename$.Helpers;
using $rootfilename$.Models.Data;
using $rootfilename$.Models.Dtos;
using $rootfilename$.Models.Services;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace $rootfilename$.Controller
{
	[Route("api/[controller]")]
    [ApiController]
    public class $classname$sController : ControllerBase
    {
        private readonly $classname$sServices _service;
        private readonly IMapper _mapper;
        public $classname$sController($classname$sServices service, IMapper mapper)
        {
            _service = service;
            _mapper = mapper;
        }

        //GET api/$classname$s
        [HttpGet]
        public ActionResult<IEnumerable<$dtoph$>> getAll$classname$s()
        {
            var liste$classname$s = _service.GetAll$classname$s();
            return Ok(_mapper.Map<IEnumerable<$dtoph$>>(liste$classname$s));
        }

        //GET api/$classname$s/{id}
        [HttpGet("{id}", Name = "Get$classname$ById")]
        public ActionResult<$dtoph$> Get$classname$ById(int id)
        {
            var commandItem = _service.Get$classname$ById(id);
            if (commandItem != null)
            {
                return Ok(_mapper.Map<$dtoph$>(commandItem));
            }
            return NotFound();
        }

        //POST api/GameConsoles
        [HttpPost]
        public ActionResult<$classname$> Create$classname$($dtoph$ objDto)
        {
            $classname$ obj = new $classname$() ;
            _mapper.Map(objDto, obj);
            //on ajoute l’objet à la base de données
            _service.Add$classname$s(obj);
            //on retourne le chemin de findById avec l'objet créé
            return CreatedAtRoute(nameof(Get$classname$ById), new { Id = obj.Id$classname$ }, obj);
        }

        [HttpPut("{id}")]
        public ActionResult Update$classname$(int id, $dtoph$ obj)
        {
            var objFromRepo = _service.Get$classname$ById(id);
            if (objFromRepo == null)
            {
                return NotFound();
            }
            objFromRepo.Dump();
            _mapper.Map(obj, objFromRepo);
            objFromRepo.Dump();
            obj.Dump();
            // inutile puisque la fonction ne fait rien, mais garde la cohérence
            _service.Update$classname$(objFromRepo);
            return NoContent();
        }

        [HttpPatch("{id}")]
        public ActionResult Partial$classname$Update(int id, JsonPatchDocument<$classname$> patchDoc)
        {
            try
            {
                var objFromRepo = _service.Get$classname$ById(id);
                objFromRepo.Dump();

                var objToPatch = _mapper.Map<$classname$>(objFromRepo);

                patchDoc.ApplyTo(objToPatch, ModelState);

                if (!TryValidateModel(objToPatch)) return ValidationProblem(ModelState);
                _mapper.Map(objToPatch, objFromRepo);
                _service.Update$classname$(objFromRepo);
                objFromRepo.Dump();
            }
            catch (HttpRequestException error)
            {
                return null;
            }
            catch (Exception)
            {
                return NotFound();
            }
            return NoContent();
        }

        //DELETE api/$classname$s/{id}
        [HttpDelete("{id}")]
        public ActionResult Delete$classname$(int id)
        {
            var objModelFromRepo = _service.Get$classname$ById(id);
            if (objModelFromRepo == null)
            {
                return NotFound();
            }
            _service.Delete$classname$(objModelFromRepo);
            return NoContent();
        }
    }
}
				]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>